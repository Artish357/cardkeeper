openapi: 3.0.0
info:
  title: Cardkeeper API
  version: "0.1"
  description: Backend methods for creating, fetching and updating mystery sheets for Monster of the Week tabletop RPG
servers:
  - url: http://localhost:3000/api
paths:
  /mysteries:
    post:
      summary: Create a new mystery
      operationId: newMystery
      tags: ["Mysteries"]
      responses:
        200:
          description: Returns the created mystery
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data: 
                        $ref: "#/components/schemas/mystery"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
    get:
      summary: Get all mysteries
      operationId: getMysteries
      responses:
        200:
          description: List of all mysteries
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/mystery"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
      tags: [ Mysteries ]
  /mysteries/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a specific mystery
      operationId: getMystery
      responses:
        200:
          description: Requested mystery is returned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/mystery"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
      tags: [ Mysteries ]
    post:
      operationId: updateMystery
      summary: Update a mystery
      requestBody:
        description: Object containing fields to update the mystery with
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mystery"
      responses:
        200:
          description: Requested mystery is returned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/mystery"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
      tags: [ Mysteries ]
    delete:
      operationId: deleteMystery
      summary: Delete a mystery
      responses:
        200:
          description: Mystery removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataResponse"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
      tags: [ Mysteries ]
  /mysteries/{id}/threats:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Create a new threat for a mystery
      tags: ["Mysteries", "Threats"]
      operationId: newThreat
      responses:
        200:
          description: New threat is returned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/threat"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
  /threats/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getThreat
      tags: ["Threats"]
      summary: Get a threat
      responses:
        200:
          description: Requested threat is returned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/threat"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
    post:
      operationId: updateThreat
      tags: ["Threats"]
      summary: Update a threat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/threat"
      responses:
        200:
          description: Updated threat is returned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/dataResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/threat"
        default:
          $ref: "#/components/responses/defaultErrorResponse"
    delete:
      operationId: deleteThreat
      tags: ["Threats"]
      summary: Delete a threat
      responses:
        200:
          description: Threat removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataResponse"
        default:
          $ref: "#/components/responses/defaultErrorResponse"

tags:
  - name: Mysteries
    description: Fetch, create and update mystery sheets
  - name: Threats
    description: Fetch, create and update threats associated with mysteries
components:
  schemas:
    mystery:
      title: Mystery
      description: A mystery (session) sheet containing all the information necessary to run the game
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        concept:
          type: string
        hook:
          type: string
        notes:
          type: string
        countdown:
          $ref: "#/components/schemas/countdown"
        threats:
          type: array
          items:
            $ref: "#/components/schemas/threat"
    countdown:
      title: Countdown
      description: Object that contains descriptions of events that were going to happen if the players weren't involved
      type: object
      properties:
        day:
          type: string
        shadows:
          type: string
        sunset:
          type: string
        dusk:
          type: string
        nightfall:
          type: string
        midnight:
          type: string
    threat:
      title: Threat
      description: Describes a threat, monster or otherwise
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        type:
          type: string
        subtype:
          type: string
        motivation:
          type: string
        isMonster:
          type: boolean
        powers:
          type: string
        weaknesses:
          type: string
        attacks:
          type: string
        armour:
          type: integer
        harm:
          type: integer
        harmCap:
          type: integer
    dataResponse:
      properties:
        status:
          type: string
          example: ok
    errorResponse:
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Unexpected error
  responses:
    defaultErrorResponse:
      description: Unexpected error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"

